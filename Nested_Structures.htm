<html>
	<head>
		<link href="../Cws.css" type="text/css" rel="stylesheet">
	</head>
	<body>
		<P><font class="clsMethodName">Working With Data Structures And Arrays</font></P>
		<ul>
			<P><font class="clsDetailText">Certain API methods require structured inputs for 
					correct transaction processing. Unlike the flat structure that is typically 
					required for request processing, nested data structures and arrays are used for 
					collections of data or for structured processing of related data items. An 
					array structure is represented in CRitaMaps as a CRitaArray. Other data 
					structures are represented by the heirarchical nature of the request to which 
					it pertains.</font>
			</P>
			<P><font class="clsMethodHeadings"> Data Structures</font></P>
			<ul>
				<P><font class="clsDetailText">An API data structure is any CRitaMap contained by 
					another another CRitaMap. This nested structure creates the relationship 
					between the data items contained by the CRitaMap. To create a data structure 
					based CRitaMap, one would simply use the&nbsp;Add method for any given CRitaMap 
					where the name is the structure name and the value is the CRitaMap. An example 
					of a CRitaMap input strucuture is the WorkPakPath structure used in 
					AddOrUpdateWorkPakPartRequest, where the Path value contains the CRitaMap path 
					structure.
				</P>
				<p>To create a WorkPakPath, the documentation lists:</p>
				</FONT>
				<table cellpadding="3" width="700" border="1" cellspacing="0" ID="Table3">
					<tr class="clsDetailHeadings">
						<th>
							Name</th>
						<th>
							DataType</th>
						<th>
							Precision</th>
						<th>
							Required</th>
						<th>
							Validated</th>
						<th>
							Notes/Description</th>
					</tr>
					<tr class="clsDetailItem">
						<td>Path</td>
						<td><a href="#AddOrUpdateWorkPakPartPath">Path</a>
							<br>
						</td>
						<td>
							<br>
						</td>
						<td>
							<br>
						</td>
						<td>
							<br>
						</td>
						<td>
							<br>
						</td>
					</tr>
				</table>
				<br>
				<a name="AddOrUpdateWorkPakPartPath"></a>Path
				<br>
				<br>
				<table cellpadding="3" width="700" border="1" cellspacing="0" ID="Table4">
					<tr class="clsDetailHeadings">
						<th>
							Name</th>
						<th>
							DataType</th>
						<th>
							Precision</th>
						<th>
							Required</th>
						<th>
							Validated</th>
						<th>
							Notes/Description</th>
					</tr>
					<tr class="clsDetailItem">
						<td>WorkPakName</td>
						<td>String
							<br>
						</td>
						<td>255
							<br>
						</td>
						<td>X
							<br>
						</td>
						<td>X
							<br>
						</td>
						<td>
							<br>
						</td>
					</tr>
				</table>
				<P>the corresponding map structure is created as shown:</P>
				<font class="clsDetailCode">CRitaMap mapRequest;
					<BR>
					CRitaMap mapPath;
					<BR>
					mapRequest.Add("RequestType","AddWorkOrderLaborRequest");
					<BR>
					mapPath.Add("WorkPakName","TestWorkPak");
					<BR>
					mapRequest.Add("Path",&amp;mapPath); </font>
			</ul>
			<P><font class="clsMethodHeadings"> Arrays&nbsp;</font></P>
			<ul>
				<P><font class="clsDetailText"><STRONG>Example 1: Batch Shipping</STRONG></font>
				</P>
				<FONT class="clsDetailText">
					<P><FONT class="clsDetailText">An API array is represented by a CRitaArray class 
						and is contained in a CRitaMap by the array collection name. The type of data 
						contained by the CRitaArray can be any CRitaMap value type or it can be a 
						CRitaMap data structure (as described above). To create an array based 
						CRitaMap, one would simply use the&nbsp;Add method for any give CRitaMap where 
						the name is the array collection name and the value is the CRitaArray. An 
						example of a CRitaArray input structure is the BatchShippingItems array used in 
						BatchShipPartRequest.
					</P>
					<P>To create a BatchShippingItems array, the documentation lists:</P>
					<P>
				</FONT>&nbsp;</P>
				<P>
					<TABLE id="Table5" cellSpacing="0" cellPadding="3" width="700" border="1">
						<TR class="clsDetailHeadings">
							<TH>
								Name</TH>
							<TH>
								DataType</TH>
							<TH>
								Precision</TH>
							<TH>
								Required</TH>
							<TH>
								Validated</TH>
							<TH>
								Notes/Description</TH></TR>
						<TR class="clsDetailItem">
							<TD>BatchShippingItems</TD>
							<TD><A href="#BatchShipPartBatchShipPartLineItem">Array of BatchShipPartLineItem</A>
								<BR>
							</TD>
							<TD><BR>
							</TD>
							<TD><BR>
							</TD>
							<TD><BR>
							</TD>
							<TD><BR>
							</TD>
						</TR>
					</TABLE>
					<BR>
					<FONT class="clsDetailSubHeadings">BatchShipPartLineItem<BR>
						<BR>
					</FONT>
					<TABLE id="Table6" cellSpacing="0" cellPadding="3" width="700" border="1">
						<TR class="clsDetailHeadings">
							<TH>
								Name</TH>
							<TH>
								DataType</TH>
							<TH>
								Precision</TH>
							<TH>
								Required</TH>
							<TH>
								Validated</TH>
							<TH>
								Notes/Description</TH></TR>
						<TR class="clsDetailItem">
							<TD>ExpectedShipmentNumber</TD>
							<TD>String
								<BR>
							</TD>
							<TD>255
								<BR>
							</TD>
							<TD>X
								<BR>
							</TD>
							<TD>X
								<BR>
							</TD>
							<TD><BR>
							</TD>
						</TR>
						<TR class="clsDetailItem">
							<TD>QuantityToShip</TD>
							<TD>Double
								<BR>
							</TD>
							<TD><BR>
							</TD>
							<TD>X
								<BR>
							</TD>
							<TD><BR>
							</TD>
							<TD><BR>
							</TD>
						</TR>
						<TR class="clsDetailItem">
							<TD>LineItemFreight</TD>
							<TD>Double
								<BR>
							</TD>
							<TD><BR>
							</TD>
							<TD><BR>
							</TD>
							<TD><BR>
							</TD>
							<TD><BR>
							</TD>
						</TR>
						<TR class="clsDetailItem">
							<TD>LineItemInsurance</TD>
							<TD>Double
								<BR>
							</TD>
							<TD><BR>
							</TD>
							<TD><BR>
							</TD>
							<TD><BR>
							</TD>
							<TD><BR>
							</TD>
						</TR>
					</TABLE>
				</P>
				<P>and the corresponding map structure is created as shown:<BR>
					<FONT class="clsDetailCode">
						<BR>
						CRitaMap mapRequest;
						<BR>
						CRitaArray arShippingItems;
						<BR>
						CRitaMap mapShippingLineItem;&nbsp;
						<BR>
						double nQtyToShip = 1.0;
						<BR>
						mapRequest.Add("RequestType","BatchShipPartRequest");
						<BR>
						mapShippingLineItem.Add("ExpectedShipmentNumber","1");
						<BR>
						mapShippingLineItem.Add("QuantityToShip",nQtyToShip);
						<BR>
						arShippingItems.Add(mapShippingLineItem);
						<BR>
						mapRequest.Add("BatchShippingItems",&amp;arShippingItems); </FONT>
				</P>
				<P><FONT class="clsDetailText"><STRONG>Example 2: User Defined Fields</STRONG></FONT></P>
				<P>An API array is represented by a CRitaArray class and is contained in a CRitaMap 
					by the array collection name. The type of data contained by the CRitaArray can 
					be any CRitaMap value type or it can be a CRitaMap data structure (as described 
					above). To create an array based CRitaMap, one would simply use the&nbsp;Add 
					method for any give CRitaMap where the name is the array collection name and 
					the value is the CRitaArray. An example of a CRitaArray input structure is 
					the&nbsp;UserDefinedFields array used in AddPartMasterRequest.
				</P>
				<p>
					To create a&nbsp;UserDefinedField array, the documentation lists:</p>
				</FONT>
				<P><table cellpadding="3" width="700" border="1" cellspacing="0" ID="Table1">
						<tr class="clsDetailHeadings">
							<th>
								Name</th>
							<th>
								DataType</th>
							<th>
								Precision</th>
							<th>
								Required</th>
							<th>
								Validated</th>
							<th>
								Notes/Description</th>
						</tr>
						<tr class="clsDetailItem">
							<td>UserDefinedFields</td>
							<td><a href="#AddPartMasterUserDefinedField">Array of UserDefinedField</a>
								<br>
							</td>
							<td>
								<br>
							</td>
							<td>
								<br>
							</td>
							<td>
								<br>
							</td>
							<td>
								<br>
							</td>
						</tr>
					</table>
					<br>
					<font class="clsDetailSubHeadings">UserDefinedField<br>
						<br>
					</font>
					<table cellpadding="3" width="700" border="1" cellspacing="0" ID="Table2">
						<tr class="clsDetailHeadings">
							<th>
								Name</th>
							<th>
								DataType</th>
							<th>
								Precision</th>
							<th>
								Required</th>
							<th>
								Validated</th>
							<th>
								Notes/Description</th>
						</tr>
						<tr class="clsDetailItem">
							<td>Label</td>
							<td>String &nbsp;
								<br>
							</td>
							<td>255
								<br>
							</td>
							<td>X
								<br>
							</td>
							<td>X
								<br>
							</td>
							<td>
								<br>
							</td>
						</tr>
						<tr class="clsDetailItem">
							<td>Data</td>
							<td>String &nbsp;
								<br>
							</td>
							<td>255
								<br>
							</td>
							<td>
								<br>
							</td>
							<td>
								<br>
							</td>
							<td>Options determine required state and validation.
								<br>
							</td>
						</tr>
					</table>
				</P>
				and the corresponding map structure is created as shown:<br>
				<font class="clsDetailCode">
					<BR>
					CRitaMap mapRequest;
					<BR>
					CRitaArray arUserDefinedFields;
					<BR>
					CRitaMap mapUserDefinedField;&nbsp;
					<BR>
					mapRequest.Add("RequestType","AddPartMasterRequest");
					<BR>
					mapUserDefinedField.Add("Label","MyUserDefinedFieldLabel");
					<BR>
					mapUserDefinedField.Add("Data","MyUserDefinedFieldDataValue");
					<BR>
					arUserDefinedFields.Add(mapUserDefinedField);
					<BR>
					mapRequest.Add("UserDefinedFields",&amp;arUserDefinedFields); </font>
			</ul>
			<UL>
				<EM><FONT face="Arial" size="2"></FONT></EM>
			</UL>
			<UL>
				<EM><FONT face="Arial" size="2"></FONT></EM>
			</UL>
			<UL>
				<EM><FONT face="Arial" size="2"></FONT></EM>
			</UL>
		</ul>
		<font class="clsDetailText">Return to <a HREF="Sample_Code.htm">Sample Code Root</a>
		</font>
	</body>
</html>
